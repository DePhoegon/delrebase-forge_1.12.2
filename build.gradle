//file:noinspection VulnerableLibrariesLocal
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}
        
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_ver}"
group = "${mod_group}"
archivesBaseName = "${mod_id}"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.compilerArgs += [
        '-proc:none' // Disable annotation processing to avoid Mixin processor warnings
    ]
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "${mc_map_ver}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    compile 'com.google.code.gson:gson:2.8.0'
}

// Mixin configuration, the refmap is required for obfuscation and needed for mixins to work properly in an obfuscated environment.
// Left commented out to use the refmap line in the mixin json instead.
// Can be set inside the mixin json as well, uncomment the line below to do so and remove the refmap line in the mixin json if you do that.
// mixin { add sourceSets.main, "${mod_id}.refmap.json" }

// Generate a constants class with values from gradle.properties
tasks.register('generateConstants') {
    // Keep the the file location using forward slashes, and /src/main/java/ as it is the root for the package path.
    // Adjust the package path as necessary, ensure it matches the file location and your mod's package structure

    // Define input and output files for proper up-to-date checking
    inputs.file('gradle.properties')
    outputs.file("src/main/java/com/dephoegon/delrebase/aid/generated/ModConstants.java")

    doLast {
        def constantsFile = file("src/main/java/com/dephoegon/delrebase/aid/generated/ModConstants.java")
        constantsFile.parentFile.mkdirs()
        constantsFile.text = """package com.dephoegon.delrebase.aid.generated;

/**
 * Auto-generated constants from gradle.properties
 * Do not edit this file manually!
 */
public class ModConstants {
    public static final String MOD_ID_FROM_GRADLE = "${mod_id}";
    public static final String NAME_FROM_GRADLE = "${mod_name}";
    public static final String VERSION_FROM_GRADLE = "${mod_ver}";
}
"""
        println "Generated ModConstants.java with values from gradle.properties"
    }
}

// gradle.projectsEvaluated is a lifecycle hook that fires after all projects in a multi-project build
// have been configured but before any tasks are executed. It's useful for configuration that depends
// on all project settings being finalized.
gradle.projectsEvaluated {
    println "Projects evaluated - ensuring constants are up to date"
    // This ensures generateConstants runs after project evaluation
    tasks.generateConstants.execute()
}

// Task execution listener - monitors when specific tasks start/finish
gradle.addListener(new TaskExecutionListener() {
    @Override
    void beforeExecute(Task task) {
        // Fire before specific workspace setup tasks
        if (task.name in ['setupCiWorkspace', 'setupDecompWorkspace', 'setupDevWorkspace']) {
            println "Running generateConstants before ${task.name}"
            tasks.generateConstants.execute()
        }

        // Fire before client/server run tasks
        if (task.name in ['runClient', 'runServer']) {
            println "Ensuring constants are updated before ${task.name}"
            // Check if gradle.properties is newer than the generated file
            def propsFile = file('gradle.properties')
            def constantsFile = file("src/main/java/com/dephoegon/delrebase/aid/generated/ModConstants.java")

            if (!constantsFile.exists() || propsFile.lastModified() > constantsFile.lastModified()) {
                println "gradle.properties is newer - regenerating constants"
                tasks.generateConstants.execute()
            }
        }
    }

    @Override
    void afterExecute(Task task, TaskState state) {
        // Optional: Log completion of important tasks
        if (task.name == 'generateConstants') {
            println "Constants generation completed"
        }
    }
})

// Build listener for broader build lifecycle events
gradle.addListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
        // This fires when build starts - good for initial setup
        println "Build started - checking if constants need regeneration"
    }

    @Override
    void settingsEvaluated(Settings settings) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {
        // Alternative way to hook into projects evaluated
        println "All projects evaluated via BuildListener"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Build finished"
    }
})

// File change monitoring (if you want to watch for changes during development)
tasks.register('watchGradleProperties') {
    doLast {
        def propsFile = file('gradle.properties')
        def constantsFile = file("src/main/java/com/dephoegon/delrebase/aid/generated/ModConstants.java")

        if (propsFile.lastModified() > constantsFile.lastModified()) {
            println "gradle.properties changed - regenerating constants"
            tasks.generateConstants.execute()
        }
    }
}

// Make sure constants are generated before compilation and on clean builds
compileJava.dependsOn generateConstants
clean.finalizedBy generateConstants

// Also ensure it runs before the setup tasks (shorthand for multiple tasks)
def setupTasks = ['setupCiWorkspace', 'setupDecompWorkspace', 'setupDevWorkspace']
tasks.configureEach { task ->
    if (task.name in setupTasks) {
        task.dependsOn generateConstants
    }
}

processResources {
    inputs.property "version", mod_ver
    inputs.property "mcversion", mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': mod_ver, 'mcversion':mc_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
runClient.outputs.upToDateWhen { false }
runServer.outputs.upToDateWhen { false }

jar {
    manifest {
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'MixinConfigs': "${mod_id}.mixins.json"
        // do not use the line below without a valid reason to use access transformers. Default to Mixins Accessors when possible.  Access transformers are more powerful but also more likely to break with other mods.
        // attributes 'FMLAT': "${mod_id}_at.cfg"
    }
}