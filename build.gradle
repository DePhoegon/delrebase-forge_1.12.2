//file:noinspection VulnerableLibrariesLocal
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}
        
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'

version = "${mod_ver}"
group = "${mod_group}"
archivesBaseName = "${mod_id}"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "${mc_map_ver}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Add JVM arguments to fix Log4j2 configuration issues
    clientJvmArgs += [
        "-Dlog4j.configurationFile=log4j2.xml",
        "-Dlog4j2.formatMsgNoLookups=true"
    ]
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    compile 'com.google.code.gson:gson:2.8.0'

    // Add Log4j2 dependencies to resolve logging errors
    compile 'org.apache.logging.log4j:log4j-core:2.8.1'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'

    // Add JANSI for terminal console support (version that exists for 2.8.1)
    compile 'org.fusesource.jansi:jansi:1.17.1'
}

// Generate a constants class with values from gradle.properties
tasks.register('generateConstants') {
    inputs.file(prop_file)
    outputs.file("${constants_file}")

    doLast {
        def constantsFile = file("${constants_file}")
        constantsFile.parentFile.mkdirs()
        if (constantsFile.exists()) { constantsFile.setWritable(true) }
        constantsFile.text = """package ${package_name};

/**
 * Auto-generated constants from gradle.properties
 * Do not edit this file manually!
 */
public class ModConstants {
    public static final String MOD_ID_FROM_GRADLE = "${mod_id}";
    public static final String NAME_FROM_GRADLE = "${mod_name}";
    public static final String VERSION_FROM_GRADLE = "${mod_ver}";
}
"""
        constantsFile.setReadOnly()
        println "Generated ModConstants.java with values from gradle.properties"
    }
}

// File change monitoring (if you want to watch for changes during development)
tasks.register('watchGradleProperties') {
    doLast {
        def propsFile = file('gradle.properties')
        def constantsFile = file("src/main/java/com/dephoegon/delrebase/aid/generated/ModConstants.java")

        if (propsFile.lastModified() > constantsFile.lastModified()) {
            println "gradle.properties changed - regenerating constants"
            generateConstants.execute()
        }
    }
}

// Make sure constants are generated before compilation and on clean builds
compileJava.dependsOn generateConstants
clean.finalizedBy generateConstants
runClient.doFirst { generateConstants }
runServer.doFirst { generateConstants }
setupCiWorkspace.doLast { generateConstants }
setupDecompWorkspace.doLast { generateConstants }
setupDevWorkspace.doLast { generateConstants }

processResources {
    inputs.property "version", mod_ver
    inputs.property "mcversion", mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': mod_ver, 'mcversion':mc_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
runClient.outputs.upToDateWhen { false }
runServer.outputs.upToDateWhen { false }

mixin { add sourceSets.main, "${mod_id}.refmap.json" }
jar {
    manifest {
        // attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'MixinConfigs': "${mod_id}.mixins.json"
        // do not use the line below without a valid reason to use access transformers. Default to Mixins Accessors when possible.  Access transformers are more powerful but also more likely to break with other mods.
        // attributes 'FMLAT': "${mod_id}_at.cfg"
    }
}