//file:noinspection VulnerableLibrariesLocal


apply plugin: "java"
apply plugin: "net.minecraftforge.gradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'

version = "${mod_ver}"
group = "${mod_group}"
// archivesBaseName = "${mod_id}"
base { archivesName = "${mod_id}" }

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    mappings channel: mc_chan, version: mc_chan_ver

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources'}

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Mixin is included in Forge, so this is only needed if you want to compile against it directly.
    // compile "org.spongepowered:mixin:0.8.5"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Generate a constants class with values from gradle.properties
tasks.register('generateConstants') {
    inputs.file(prop_file)
    outputs.file("${constants_file}")

    doLast {
        def constantsFile = file("${constants_file}")
        constantsFile.parentFile.mkdirs()
        if (constantsFile.exists()) { constantsFile.setWritable(true) }
        constantsFile.text = """package ${package_name};

/**
 * Auto-generated constants from gradle.properties
 * Do not edit this file manually!
 */
public class ModConstants {
    public static final String MOD_ID_FROM_GRADLE = "${mod_id}";
    public static final String NAME_FROM_GRADLE = "${mod_name}";
    public static final String VERSION_FROM_GRADLE = "${mod_ver}";
}
"""
        constantsFile.setReadOnly()
        println "Generated ModConstants.java with values from gradle.properties"
    }
}

// File change monitoring (if you want to watch for changes during development)
tasks.register('watchGradleProperties') {
    doLast {
        def propsFile = file('gradle.properties')
        def constantsFile = file("src/main/java/com/dephoegon/delrebase/aid/generated/ModConstants.java")

        if (propsFile.lastModified() > constantsFile.lastModified()) {
            println "gradle.properties changed - regenerating constants"
            generateConstants.execute()
        }
    }
}

// Make sure constants are generated before compilation and on clean builds
compileJava.dependsOn generateConstants
clean.finalizedBy generateConstants
/*
runClient.doFirst { generateConstants }
runServer.doFirst { generateConstants }
setupCiWorkspace.doLast { generateConstants }
setupDecompWorkspace.doLast { generateConstants }
setupDevWorkspace.doLast { generateConstants }
*/

processResources {
    inputs.property "version", mod_ver
    inputs.property "mcversion", mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': mod_ver, 'mcversion':mc_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author_vender,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_author_vender,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}