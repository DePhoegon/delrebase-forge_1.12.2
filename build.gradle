//file:noinspection VulnerableLibrariesLocal
//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.24', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${mod_ver}"
group = "${mod_group}"
base { archivesName = "${mod_id}" }

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
sourceCompatibility = targetCompatibility = '1.8'

compileJava {
    sourceCompatibility = '8'
    targetCompatibility = '8'
}
minecraft {
    mappings channel: mc_chan, version: mc_chan_ver

    // For 1.12.2, we need to use the older run configuration style
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Mixin configuration for client
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Mixin configuration for server
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Configure Mixin
mixin {
    add sourceSets.main, "delrebase.refmap.json"
    config "delrebase.mixins.json"
}

repositories {
    maven {
        name = 'Sponge Maven'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Mixin dependencies for 1.12.2 with comprehensive ASM conflict resolution
    implementation('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude group: 'org.ow2.asm'
    }
    annotationProcessor('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude group: 'org.ow2.asm'
    }

    // Force consistent ASM 5.2 versions to match what Forge 1.12.2 uses
    implementation 'org.ow2.asm:asm-debug-all:5.2'
    configurations.forEach {
        it.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.ow2.asm' && details.requested.name.startsWith('asm')) {
                details.useVersion '5.2'
            }
        }
    }
}

// Generate a constants class with values from gradle.properties
tasks.register('generateConstants') {
    inputs.file(prop_file)
    outputs.file("${constants_file}")

    doLast {
        def constantsFile = file("${constants_file}")
        constantsFile.parentFile.mkdirs()
        if (constantsFile.exists()) { constantsFile.setWritable(true) }
        constantsFile.text = """package ${package_name};

/**
 * Auto-generated constants from gradle.properties
 * Do not edit this file manually!
 */
public class ModConstants {
    public static final String MOD_ID_FROM_GRADLE = "${mod_id}";
    public static final String NAME_FROM_GRADLE = "${mod_name}";
    public static final String VERSION_FROM_GRADLE = "${mod_ver}";
}
"""
        constantsFile.setReadOnly()
        println "Generated ModConstants.java with values from gradle.properties"
    }
}

// Make sure constants are generated before compilation
compileJava.dependsOn generateConstants

def resourceTargets = ['pack.mcmeta', 'mcmod.info']
def replaceProperties = [
        mod_id         : mod_id, mod_name: mod_name, version: mod_ver,
        mod_authors    : mod_authors, mod_description: mod_desc, mcversion: mc_version
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author_vender,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_ver,
                "Implementation-Vendor"   : mod_author_vender,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "delrebase.mixins.json"
        ])
    }
}
